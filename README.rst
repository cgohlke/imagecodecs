..
  This file is generated by setup.py

Image transformation, compression, and decompression codecs
===========================================================

Imagecodecs is a Python library that provides block-oriented, in-memory buffer
transformation, compression, and decompression functions for use in tifffile,
liffile, czifile, zarr, and other scientific image input/output packages.

Decode and/or encode functions are implemented for Zlib (DEFLATE), GZIP, LZMA,
ZStandard (ZSTD), Blosc, Brotli, Snappy, BZ2, LZ4, LZ4F, LZ4HC, LZ4H5, LZW,
LZO, LZF, LZFSE, LZHAM, PGLZ (PostgreSQL LZ), RCOMP (Rice), ZFP, SZ3, Pcodec,
SPERR, AEC, SZIP, LERC, EER, NPY, BCn, DDS, BMP, PNG, APNG, GIF, TIFF, WebP,
JPEG (2 to 16-bit), Lossless JPEG (LJPEG, LJ92, JPEGLL), JPEG 2000 (JP2, J2K),
JPEG LS, JPEG XL, JPEG XS, JPEG XR (WDP, HD Photo), Ultra HDR (JPEG_R),
MOZJPEG, AVIF, HEIF, QOI, RGBE (HDR), Jetraw, DICOMRLE, PackBits,
Packed Integers, Delta, XOR Delta, Floating Point Predictor, Bitorder reversal,
Byteshuffle, Bitshuffle, Float24 (24-bit floating point),
Quantize (Scale, BitGroom, BitRound, GranularBR), and
CMS (color space transformations).
Checksum functions are implemented for crc32, adler32, fletcher32, and
Jenkins lookup3.

:Author: `Christoph Gohlke <https://www.cgohlke.com>`_
:License: BSD-3-Clause
:Version: 2025.8.2
:DOI: `10.5281/zenodo.6915978 <https://doi.org/10.5281/zenodo.6915978>`_

Quickstart
----------

Install the imagecodecs package and all dependencies from the
`Python Package Index <https://pypi.org/project/imagecodecs/>`_::

    python -m pip install -U "imagecodecs[all]"

Imagecodecs is also available in other package repositories such as
`Anaconda <https://anaconda.org/conda-forge/imagecodecs>`_,
`MSYS2 <https://packages.msys2.org/base/mingw-w64-python-imagecodecs>`_, and
`MacPorts <https://ports.macports.org/port/py-imagecodecs/summary>`_.

See `Requirements`_ and `Notes`_ for building from source.

See `Examples`_ for using the programming interface.

Source code and support are available on
`GitHub <https://github.com/cgohlke/imagecodecs>`_.

Requirements
------------

This revision was tested with the following requirements and dependencies
(other versions may work):

- `CPython <https://www.python.org>`_ 3.11.9, 3.12.10, 3.13.5 3.14.0rc 64-bit
- `Numpy <https://pypi.org/project/numpy>`_ 2.3.2
- `numcodecs <https://pypi.org/project/numcodecs/>`_ 0.16.1
  (optional, for Zarr file format 2 compatible codecs)

Build requirements:

- `Cython <https://github.com/cython/cython>`_ 3.1.2
- `brotli <https://github.com/google/brotli>`_ 1.1.0
- `brunsli <https://github.com/google/brunsli>`_ 0.1
- `bzip2 <https://gitlab.com/bzip2/bzip2>`_ 1.0.8
- `c-blosc <https://github.com/Blosc/c-blosc>`_ 1.21.6
- `c-blosc2 <https://github.com/Blosc/c-blosc2>`_ 2.19.1
- `charls <https://github.com/team-charls/charls>`_ 2.4.2
- `giflib <https://sourceforge.net/projects/giflib/>`_ 5.2.2
- `jetraw <https://github.com/Jetraw/Jetraw>`_ 23.03.16.4
- `jxrlib <https://github.com/cgohlke/jxrlib>`_ 1.2
- `lcms2 <https://github.com/mm2/Little-CMS>`_ 2.17
- `lerc <https://github.com/Esri/lerc>`_ 4.0.4
- `libaec <https://gitlab.dkrz.de/k202009/libaec>`_ 1.1.4
- `libavif <https://github.com/AOMediaCodec/libavif>`_ 1.3.0
  (`aom <https://aomedia.googlesource.com/aom>`_ 3.12.1,
  `dav1d <https://github.com/videolan/dav1d>`_ 1.5.1,
  `rav1e <https://github.com/xiph/rav1e>`_ 0.8.1,
  `svt-av1 <https://gitlab.com/AOMediaCodec/SVT-AV1>`_ 3.0.2,
  `libyuv <https://chromium.googlesource.com/libyuv/libyuv>`_ main,
  `libxml2 <https://gitlab.gnome.org/GNOME/libxml2>`_ 2.14.5)
- `libdeflate <https://github.com/ebiggers/libdeflate>`_ 1.24
- `libheif <https://github.com/strukturag/libheif>`_ 1.20.1
  (`libde265 <https://github.com/strukturag/libde265>`_ 1.0.16,
  `x265 <https://bitbucket.org/multicoreware/x265_git/src/master/>`_ 4.1)
- `libjpeg-turbo <https://github.com/libjpeg-turbo/libjpeg-turbo>`_ 3.1.1
- `libjxl <https://github.com/libjxl/libjxl>`_ 0.11.1
- `libjxs <https://jpeg.org/jpegxs/software.html>`_ 2.0.2
- `liblzma <https://github.com/tukaani-project/xz>`_ 5.8.1
- `libpng <https://github.com/glennrp/libpng>`_ 1.6.50
- `libpng-apng <https://sourceforge.net/projects/libpng-apng/>`_ 1.6.50
- `libtiff <https://gitlab.com/libtiff/libtiff>`_ 4.7.0
- `libultrahdr <https://github.com/google/libultrahdr>`_ 1.4.0
- `libwebp <https://github.com/webmproject/libwebp>`_ 1.6.0
- `lz4 <https://github.com/lz4/lz4>`_ 1.10.0
- `lzfse <https://github.com/lzfse/lzfse/>`_ 1.0
- `lzham_codec <https://github.com/richgel999/lzham_codec/>`_ 1.0
- `lzokay <https://github.com/AxioDL/lzokay>`_ db2df1f
- `mozjpeg <https://github.com/mozilla/mozjpeg>`_ 4.1.5
- `openjpeg <https://github.com/uclouvain/openjpeg>`_ 2.5.3
- `pcodec <https://github.com/mwlon/pcodec>`_ 0.3.1 (0.4.x crashes)
- `snappy <https://github.com/google/snappy>`_ 1.2.2
- `sperr <https://github.com/NCAR/SPERR>`_ 0.8.2 (0.8.3 crashes)
- `sz3 <https://github.com/szcompressor/SZ3>`_ 3.1.8 (3.2.x crashes)
- `zfp <https://github.com/LLNL/zfp>`_ 1.0.1
- `zlib <https://github.com/madler/zlib>`_ 1.3.1
- `zlib-ng <https://github.com/zlib-ng/zlib-ng>`_ 2.2.4
- `zopfli <https://github.com/google/zopfli>`_ 1.0.3
- `zstd <https://github.com/facebook/zstd>`_ 1.5.7

Vendored requirements:

- `bcdec.h <https://github.com/iOrange/bcdec>`_ 963c5e5
- `bitshuffle <https://github.com/kiyo-masui/bitshuffle>`_ 0.5.2
- `cfitsio ricecomp.c <https://heasarc.gsfc.nasa.gov/fitsio/>`_ modified
- `h5checksum.c <https://github.com/HDFGroup/hdf5/>`_ modified
- `jpg_0XC3.cpp
  <https://github.com/rordenlab/dcm2niix/blob/master/console/jpg_0XC3.cpp>`_
  modified
- `liblj92
  <https://bitbucket.org/baldand/mlrawviewer/src/master/liblj92/>`_ modified
- `liblzf <http://oldhome.schmorp.de/marc/liblzf.html>`_ 3.6
- `libspng <https://github.com/randy408/libspng>`_ 0.7.4
- `nc4var.c <https://github.com/Unidata/netcdf-c/blob/main/libsrc4/nc4var.c>`_
  modified
- `pg_lzcompress.c <https://github.com/postgres/postgres>`_ modified
- `qoi.h <https://github.com/phoboslab/qoi/>`_ 4461cc3
- `rgbe.c <https://www.graphics.cornell.edu/~bjw/rgbe/rgbe.c>`_ modified

Test requirements:

- `tifffile <https://github.com/cgohlke/tifffile>`_ 2025.6.11
- `czifile <https://github.com/cgohlke/czifile>`_ 2019.7.2.1
- `liffile <https://github.com/cgohlke/liffile>`_ 2025.5.10
- `zarr <https://github.com/zarr-developers/zarr-python>`_ 3.1.1
- `python-blosc <https://github.com/Blosc/python-blosc>`_ 1.11.3
- `python-blosc2 <https://github.com/Blosc/python-blosc2>`_ 3.6.1
- `python-brotli <https://github.com/google/brotli/tree/master/python>`_ 1.1.0
- `python-lz4 <https://github.com/python-lz4/python-lz4>`_ 4.4.4
- `python-lzf <https://github.com/teepark/python-lzf>`_ 0.2.6
- `python-snappy <https://github.com/andrix/python-snappy>`_ 0.7.3
- `python-zstd <https://github.com/sergey-dryabzhinsky/python-zstd>`_ 1.5.7
- `pyliblzfse <https://github.com/ydkhatri/pyliblzfse>`_ 0.4.1
- `zopflipy <https://github.com/hattya/zopflipy>`_ 1.11

Revisions
---------

2025.8.2

- Pass 7339 tests.
- Fix szip_encode default output buffer might be too small (#128).
- Fix minor bugs in LZ4H5 codec (#127).
- Avoid grayscale-to-RGB conversions in AVIF codecs.
- Improve AVIF error messages.
- Add flag for free-threading compatibility (#113).
- Do not use zlib uncompress2, which is not available on manylinux.
- Do not build unstable BRUNSLI, PCODEC, SPERR, and SZ3 codecs.
- Require libavif >= 1.3 and Cython >= 3.1.
- Support Python 3.14 and 3.14t.
- Drop support for Python 3.10 and PyPy.

2025.3.30

- Fix some codecs for use with Zarr 3, zarr_format=2 (#123).
- Fix LZ4H5 codec when block size is less than compressed size (#126).
- Fix pglz_compress is not thread-safe.
- Set __module__ attribute on public objects.
- Drop support for Python 3.9, deprecate Python 3.10.

2024.12.30

- Fix out parameter array not zeroed in some cases.
- Fix ultrahdr_encode with linear rgbaf16 input (#108).
- Fix jpegls_encode with level greater than 9 (#119).
- Fix jpeg8_encode with bitspersample and lossless=False (#116).
- Fix excessive buffer allocation in lz4h5_encode (#112).
- Fix build error with libjpeg (#111).

2024.9.22

- Use libjpeg-turbo for all Lossless JPEG bit-depths if possible (#105).
- Fix PackBits encoder fails to skip short replication blocks (#107).
- Fix JPEG2K encoder leaving trailing random bytes (#104).
- Fix encoding and decoding JPEG XL with custom bitspersample (#102).
- Improve error handling in lzf_decode (#103).
- Add Ultra HDR (JPEG_R) codec based on libultrahdr library (#108).
- Add JPEGXS codec based on libjxs library (source only).
- Add SZ3 codec based on SZ3 library.
- Deprecate Python 3.9, support Python 3.13.

2024.6.1

- â€¦

Refer to the CHANGES file for older revisions.

Objectives
----------

Many scientific image storage formats, such as TIFF, CZI, XLIF, DICOM, HDF,
and Zarr are containers that store numerous small data segments (chunks, tiles,
stripes). These segments are encoded using various compression and
pre-filtering methods. Metadata common to all data segments are typically
stored separately from the segments.

The purpose of the Imagecodecs library is to support Python modules in
encoding and decoding such data segments. The specific aims are:

- Provide functions for encoding and decoding small image data segments
  in-memory (as opposed to in-file) from and to bytes or numpy arrays for many
  compression and filtering methods.
- Support image formats and compression methods that are not available
  elsewhere in the Python ecosystem.
- Reduce the runtime dependency on numerous, large, inapt, or unmaintained
  Python packages. The Imagecodecs package only depends on numpy.
- Implement codecs as Cython wrappers of third-party libraries with a C API
  and permissive license if available; otherwise use own C library.
  Provide Cython definition files for the wrapped C libraries.
- Release the Python global interpreter lock (GIL) during extended native/C
  function calls for multi-threaded use.

Accessing parts of large data segments and reading metadata from segments
are outside the scope of this library.

Notes
-----

This library is largely a work in progress.

The API is not stable yet and might change between revisions.

Python <= 3.9 is no longer supported. 32-bit versions are deprecated.

Works on little-endian platforms only.

Supported platforms are ``win_amd64``, ``win_arm64``, ``win32``,
``macosx_x86_64``, ``macosx_arm64``, ``manylinux_x86_64``, and
``manylinux_aarch64``.

Wheels may not be available for all platforms and all releases.

Not all features are available on all platforms.

The ``tiff``, ``bcn``, ``dds``, ``dicomrle``, ``eer``, ``lzo``, ``packints``,
and ``jpegsof3`` codecs are currently decode-only.

The ``brunsli``, ``pcodec``, ``sz3``, and ``sperr`` codecs are distributed
as source code only because the underlying libraries are unreliable.

The ``heif``, ``jetraw``, and ``jpegxs`` codecs are distributed as source
code only due to license and possible patent usage issues.

The latest `Microsoft Visual C++ Redistributable for Visual Studio 2015-2022
<https://docs.microsoft.com/en-US/cpp/windows/latest-supported-vc-redist>`_
is required on Windows.

Refer to the imagecodecs/licenses folder for 3rd-party library licenses.

This software is based in part on the work of the Independent JPEG Group.

Update pip and setuptools to the latest version before installing imagecodecs::

    python -m pip install -U pip setuptools wheel Cython

Before building imagecodecs from source code, install required tools and
libraries. For example, on latest Ubuntu Linux distributions:

    ``sudo apt-get install build-essential python3-dev cython3 python3-pip
    python3-setuptools python3-wheel python3-numpy libdeflate-dev libjpeg-dev
    libjxr-dev liblcms2-dev liblz4-dev liblerc-dev liblzma-dev libopenjp2-7-dev
    libpng-dev libtiff-dev libwebp-dev libz-dev libzstd-dev``

To build and install imagecodecs from source code, run::

    python -m pip install .

Many extensions are disabled by default when building from source.

To define which extensions are built, or to modify build settings such as
library names and compiler arguments, provide a
``imagecodecs_distributor_setup.customize_build`` function, which is
imported and executed during setup.
See ``setup.py`` for pre-defined ``customize_build`` functions.

Other projects providing imaging or compression codecs:
`Python zlib <https://docs.python.org/3/library/zlib.html>`_,
`Python bz2 <https://docs.python.org/3/library/bz2.html>`_,
`Python lzma <https://docs.python.org/3/library/lzma.html>`_,
`backports.lzma <https://github.com/peterjc/backports.lzma>`_,
`python-lzo <https://bitbucket.org/james_taylor/python-lzo-static>`_,
`python-lzw <https://github.com/joeatwork/python-lzw>`_,
`python-lerc <https://pypi.org/project/lerc/>`_,
`wavpack-numcodecs
<https://github.com/AllenNeuralDynamics/wavpack-numcodecs>`_,
`packbits <https://github.com/psd-tools/packbits>`_,
`isa-l.igzip <https://github.com/intel/isa-l>`_,
`fpzip <https://github.com/seung-lab/fpzip>`_,
`libmng <https://sourceforge.net/projects/libmng/>`_,
`OpenEXR <https://github.com/AcademySoftwareFoundation/openexr>`_
(EXR, PIZ, PXR24, B44, DWA),
`pyJetraw <https://github.com/Jetraw/pyJetraw>`_,
`tinyexr <https://github.com/syoyo/tinyexr>`_,
`pytinyexr <https://github.com/syoyo/pytinyexr>`_,
`pyroexr <https://github.com/dragly/pyroexr>`_,
`JasPer <https://github.com/jasper-software/jasper>`_,
`libjpeg <https://github.com/thorfdbg/libjpeg>`_ (GPL),
`pylibjpeg <https://github.com/pydicom/pylibjpeg>`_,
`pylibjpeg-libjpeg <https://github.com/pydicom/pylibjpeg-libjpeg>`_ (GPL),
`pylibjpeg-openjpeg <https://github.com/pydicom/pylibjpeg-openjpeg>`_,
`pylibjpeg-rle <https://github.com/pydicom/pylibjpeg-rle>`_,
`glymur <https://github.com/quintusdias/glymur>`_,
`pyheif <https://github.com/carsales/pyheif>`_,
`pyrus-cramjam <https://github.com/milesgranger/pyrus-cramjam>`_,
`PyLZHAM <https://github.com/Galaxy1036/pylzham>`_,
`BriefLZ <https://github.com/jibsen/brieflz>`_,
`QuickLZ <http://www.quicklz.com/>`_ (GPL),
`LZO <http://www.oberhumer.com/opensource/lzo/>`_ (GPL),
`nvJPEG <https://developer.nvidia.com/nvjpeg>`_,
`nvJPEG2K <https://developer.nvidia.com/nvjpeg>`_,
`PyTurboJPEG <https://github.com/lilohuang/PyTurboJPEG>`_,
`CCSDS123 <https://github.com/drowzie/CCSDS123-Issue-2>`_,
`LPC-Rice <https://sourceforge.net/projects/lpcrice/>`_,
`CompressionAlgorithms <https://github.com/glampert/compression-algorithms>`_,
`Compressonator <https://github.com/GPUOpen-Tools/Compressonator>`_,
`Wuffs <https://github.com/google/wuffs>`_,
`TinyDNG <https://github.com/syoyo/tinydng>`_,
`OpenJPH <https://github.com/aous72/OpenJPH>`_,
`Grok <https://github.com/GrokImageCompression/grok>`_ (AGPL),
`MAFISC
<https://wr.informatik.uni-hamburg.de/research/projects/icomex/mafisc>`_,
`B3D <https://github.com/balintbalazs/B3D>`_,
`fo-dicom.Codecs <https://github.com/Efferent-Health/fo-dicom.Codecs>`_,
`jpegli <https://github.com/google/jpegli>`_,
`hdf5plugin <https://github.com/silx-kit/hdf5plugin>`_.

Examples
--------
Import the JPEG2K codec:

.. code-block:: python

    >>> from imagecodecs import (
    ...     jpeg2k_encode,
    ...     jpeg2k_decode,
    ...     jpeg2k_check,
    ...     jpeg2k_version,
    ...     JPEG2K,
    ... )

Check that the JPEG2K codec is available in the imagecodecs build:

.. code-block:: python

    >>> JPEG2K.available
    True

Print the version of the JPEG2K codec's underlying OpenJPEG library:

.. code-block:: python

    >>> jpeg2k_version()
    'openjpeg 2.5.3'

Encode a numpy array in lossless JP2 format:

.. code-block:: python

    >>> import numpy
    >>> array = numpy.random.randint(100, 200, (256, 256, 3), numpy.uint8)
    >>> encoded = jpeg2k_encode(array, level=0)
    >>> bytes(encoded[:12])
    b'\x00\x00\x00\x0cjP  \r\n\x87\n'

Check that the encoded bytes likely contain a JPEG 2000 stream:

.. code-block:: python

    >>> jpeg2k_check(encoded)
    True

Decode the JP2 encoded bytes to a numpy array:

.. code-block:: python

    >>> decoded = jpeg2k_decode(encoded)
    >>> numpy.array_equal(decoded, array)
    True

Decode the JP2 encoded bytes to an existing numpy array:

.. code-block:: python

    >>> out = numpy.empty_like(array)
    >>> _ = jpeg2k_decode(encoded, out=out)
    >>> numpy.array_equal(out, array)
    True

Not all codecs are fully implemented, raising exceptions at runtime:

.. code-block:: python

    >>> from imagecodecs import tiff_encode
    >>> tiff_encode(array)
    Traceback (most recent call last):
     ...
    NotImplementedError: tiff_encode

Write the numpy array to a JP2 file:

.. code-block:: python

    >>> from imagecodecs import imwrite, imread
    >>> imwrite('_test.jp2', array)

Read the image from the JP2 file as numpy array:

.. code-block:: python

    >>> image = imread('_test.jp2')
    >>> numpy.array_equal(image, array)
    True

Create a JPEG 2000 compressed Zarr 2 array:

.. code-block:: python

    >>> import zarr
    >>> import numcodecs
    >>> from imagecodecs.numcodecs import Jpeg2k
    >>> numcodecs.register_codec(Jpeg2k)
    >>> zarr.zeros(
    ...     (4, 5, 512, 512, 3),
    ...     chunks=(1, 1, 256, 256, 3),
    ...     dtype='u1',
    ...     compressor=Jpeg2k(),
    ...     zarr_format=2,
    ... )
    <...Array ...(4, 5, 512, 512, 3) ...uint8>

Access image data in a sequence of JP2 files via tifffile.FileSequence and
dask.array (requires Zarr 2):

.. code-block:: python

    >>> import tifffile
    >>> import dask.array
    >>> def jp2_read(filename):
    ...     with open(filename, 'rb') as fh:
    ...         data = fh.read()
    ...     return jpeg2k_decode(data)
    ...
    >>> with tifffile.FileSequence(jp2_read, '*.jp2') as ims:
    ...     with ims.aszarr() as store:
    ...         dask.array.from_zarr(store)
    ...
    dask.array<from-zarr, shape=(1, 256, 256, 3)...chunksize=(1, 256, 256, 3)...

Write the Zarr 2 store to a fsspec ReferenceFileSystem in JSON format
and open it as a Zarr array:

.. code-block:: python

    >>> store.write_fsspec(
    ...     'temp.json', url='file://', codec_id='imagecodecs_jpeg2k'
    ... )
    >>> from kerchunk.utils import refs_as_store
    >>> zarr.open(refs_as_store('temp.json'), mode='r')
    <Array <FsspecStore(ReferenceFileSystem, /)> shape=(1, 256, 256, 3) dtype=uint8>

View the image in the JP2 file from the command line::

    python -m imagecodecs _test.jp2